name: Full Security Pipeline (SCA, SAST, Compliance, DAST)

on:
  pull_request:
    branches: [ "main" ]

jobs:
  # JOB 1: Dependency Scanning (SCA) for Node.js
  dependency-scan:
    name: SCA - Dependency Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Scan for vulnerable dependencies
        uses: actions/dependency-review-action@v3

  # JOB 2: Static Analysis (SAST) for Node.js Source Code
  codeql-sast-scan:
    name: SAST - CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          # Analyze JavaScript/TypeScript in this repository
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # JOB 3: Infrastructure Compliance Scanning
  compliance-scan:
    name: Compliance - Checkov Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./
          quiet: false
          fail_on: FAILURE

  # JOB 4: Dynamic Application Security Testing (DAST) 
  dast-scan:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    # This job requires the app's dependencies to be installed first
    needs: [dependency-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      # Step 1: Start the application server
      - name: Start target application
        run: |
          echo "Starting the application server..."
          nohup npm start > server.log 2>&1 &
          echo $! > server.pid
          sleep 10

          # Verify the server is running
          if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "Application server is running successfully on port 3000"
            echo "--- Server logs ---"
            cat server.log
            echo "-------------------"
          else
            echo "Application failed to start. Server logs:"
            cat server.log
            exit 1
          fi
        env:
          PORT: 3000

      # Step 2: Run OWASP ZAP Full Scan
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://localhost:3000'
          cmd_options: '-a -T 60'  # Show all results, 60min timeout
          fail_action: false        # Report findings but don't fail the build

      # Step 3: Cleanup - Stop server always
      - name: Stop application server
        if: always()
        run: |
          echo "Stopping application server..."
          if [ -f server.pid ]; then
            kill -TERM $(cat server.pid) 2>/dev/null || true
            rm -f server.pid
          fi
          echo "Cleanup complete."

      # Step 4: Upload results as artifacts
      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-results
          path: |
            server.log
            .zap/report.html
